import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.Dh1jimFm.js";const k=JSON.parse('{"title":"深入理解 history 与 location 的关系及相互影响","description":"","frontmatter":{},"headers":[],"relativePath":"learn_frontend/js/js基础/BOM-location与history的相互作用.md","filePath":"learn_frontend/js/js基础/BOM-location与history的相互作用.md"}'),o={name:"learn_frontend/js/js基础/BOM-location与history的相互作用.md"};function l(n,s,r,h,d,c){return t(),a("div",null,s[0]||(s[0]=[e('<h1 id="深入理解-history-与-location-的关系及相互影响" tabindex="-1">深入理解 <code>history</code> 与 <code>location</code> 的关系及相互影响 <a class="header-anchor" href="#深入理解-history-与-location-的关系及相互影响" aria-label="Permalink to &quot;深入理解 `history` 与 `location` 的关系及相互影响&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#核心概念对比">核心概念对比</a></li><li><a href="#location-如何影响-history">location 如何影响 history</a><ul><li><a href="#location-href-或-location-assign">location.href= 或 location.assign()</a></li><li><a href="#location-replace">location.replace()</a></li><li><a href="#location-reload">location.reload()</a></li><li><a href="#修改-location-hash">修改 location.hash</a></li></ul></li><li><a href="#history-如何影响-location">history 如何影响 location</a><ul><li><a href="#history-pushstate">history.pushState()</a></li><li><a href="#history-replacestate">history.replaceState()</a></li><li><a href="#用户手动前进-后退">用户手动前进/后退</a></li></ul></li></ul></nav><p><code>history</code> 和 <code>location</code> 是浏览器 BOM（Browser Object Model）中两个核心对象，它们共同管理浏览器的导航和 URL 状态，但在功能上有明确分工，同时也会相互影响。以下是详细解析：</p><h2 id="核心概念对比" tabindex="-1">核心概念对比 <a class="header-anchor" href="#核心概念对比" aria-label="Permalink to &quot;核心概念对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th><code>history</code> 对象</th><th><code>location</code> 对象</th></tr></thead><tbody><tr><td><strong>作用</strong></td><td>管理浏览器会话历史记录（前进/后退）</td><td>读写当前页面的 URL 信息</td></tr><tr><td><strong>关键方法/属性</strong></td><td><code>pushState()</code>, <code>replaceState()</code>, <code>go()</code>, <code>back()</code>, <code>state</code></td><td><code>href</code>, <code>assign()</code>, <code>replace()</code>, <code>reload()</code>, <code>hash</code>, <code>search</code></td></tr><tr><td><strong>是否触发页面跳转</strong></td><td><code>pushState/replaceState</code> <strong>不跳转</strong></td><td><code>location.href=</code> <strong>会跳转</strong></td></tr><tr><td><strong>是否发网络请求</strong></td><td>❌ 否</td><td>✅ 是（除非仅修改 hash）</td></tr><tr><td><strong>典型用途</strong></td><td>SPA 无刷新路由</td><td>页面跳转、URL 参数解析</td></tr></tbody></table><h2 id="location-如何影响-history" tabindex="-1"><code>location</code> 如何影响 <code>history</code> <a class="header-anchor" href="#location-如何影响-history" aria-label="Permalink to &quot;`location` 如何影响 `history`&quot;">​</a></h2><h3 id="location-href-或-location-assign" tabindex="-1"><code>location.href=</code> 或 <code>location.assign()</code> <a class="header-anchor" href="#location-href-或-location-assign" aria-label="Permalink to &quot;`location.href=` 或 `location.assign()`&quot;">​</a></h3><ul><li><strong>行为</strong>： 跳转到新 URL，<strong>必定新增一条历史记录</strong>（相当于 <code>history.pushState</code> + 强制页面刷新）。</li><li><strong>示例</strong>：<div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.href </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/new-page&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 新增记录，触发页面加载</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><strong>对 <code>history</code> 的影响</strong>： 历史栈长度 +1，<code>history.state</code> 为新页面的初始值（通常为 <code>null</code>）。</li></ul><div class="tip custom-block"><p class="custom-block-title">关于历史栈</p><p>历史栈中的每个条目（entry）包含以下信息：</p><ul><li>​URL​ - 访问的页面地址</li><li>​State 对象 ​ - 关联的状态数据（可选）</li><li>文档状态 ​ - 页面的快照（在某些浏览器实现中）</li></ul></div><h3 id="location-replace" tabindex="-1"><code>location.replace()</code> <a class="header-anchor" href="#location-replace" aria-label="Permalink to &quot;`location.replace()`&quot;">​</a></h3><ul><li><strong>行为</strong>：<br> 替换当前历史记录（无刷新时类似 <code>history.replaceState</code>，但会强制跳转）。</li><li><strong>示例</strong>：<div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/login&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 替换当前记录，触发页面加载</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><strong>对 <code>history</code> 的影响</strong>：<br> 历史栈长度不变，当前条目被替换，<code>history.state</code> 丢失。</li></ul><h3 id="location-reload" tabindex="-1"><code>location.reload()</code> <a class="header-anchor" href="#location-reload" aria-label="Permalink to &quot;`location.reload()`&quot;">​</a></h3><ul><li><strong>行为</strong>：<br> 重新加载当前页面，<strong>保留当前历史记录</strong>。</li><li><strong>对 <code>history</code> 的影响</strong>：<br><code>history.state</code> 保持不变（若之前通过 <code>pushState</code> 设置过）。</li></ul><h3 id="修改-location-hash" tabindex="-1">修改 <code>location.hash</code> <a class="header-anchor" href="#修改-location-hash" aria-label="Permalink to &quot;修改 `location.hash`&quot;">​</a></h3><ul><li><strong>行为</strong>：<br> 仅修改 URL 的哈希部分（<code>#</code> 后内容），<strong>不触发页面刷新</strong>（除非监听 <code>hashchange</code> 事件）。</li><li><strong>示例</strong>：<div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.hash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;#section-2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不会新增历史记录</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><strong>对 <code>history</code> 的影响</strong>： <ul><li>默认情况下<strong>新增一条历史记录</strong>（类似 <code>pushState</code>）。</li><li>若希望不新增记录，需配合 <code>history.replaceState</code>：<div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replaceState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`#${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">newHash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li></ul><hr><h2 id="history-如何影响-location" tabindex="-1"><code>history</code> 如何影响 <code>location</code> <a class="header-anchor" href="#history-如何影响-location" aria-label="Permalink to &quot;`history` 如何影响 `location`&quot;">​</a></h2><h3 id="history-pushstate" tabindex="-1"><code>history.pushState()</code> <a class="header-anchor" href="#history-pushstate" aria-label="Permalink to &quot;`history.pushState()`&quot;">​</a></h3><ul><li><strong>行为</strong>：<br> 修改 URL 和 <code>state</code>，<strong>不改变 <code>location</code> 的其他属性</strong>（如 <code>search</code>、<code>hash</code>）。</li><li><strong>关键点</strong>： <ul><li><code>location.href</code> 会同步更新为新 URL。</li><li><code>location.pathname</code>/<code>location.search</code> 等属性也会响应变化。</li></ul></li><li><strong>示例</strong>：<div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pushState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/product?page=2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location.pathname); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;/product&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location.search); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;?page=2&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h3 id="history-replacestate" tabindex="-1"><code>history.replaceState()</code> <a class="header-anchor" href="#history-replacestate" aria-label="Permalink to &quot;`history.replaceState()`&quot;">​</a></h3><ul><li><strong>行为</strong>：<br> 替换当前 URL 和 <code>state</code>，<strong>不触发 <code>location</code> 的跳转逻辑</strong>。</li><li><strong>对 <code>location</code> 的影响</strong>： <ul><li><code>location</code> 的所有相关属性（<code>href</code>、<code>pathname</code> 等）立即更新。</li><li>页面不会重新加载。</li></ul></li></ul><h3 id="用户手动前进-后退" tabindex="-1">用户手动前进/后退 <a class="header-anchor" href="#用户手动前进-后退" aria-label="Permalink to &quot;用户手动前进/后退&quot;">​</a></h3><ul><li><strong>行为</strong>：<br> 通过 <code>history.back()</code>/<code>forward()</code> 或浏览器按钮导航时： <ul><li><code>location</code> 自动更新为目标 URL。</li><li>若目标 URL 有 <code>state</code>，会触发 <code>popstate</code> 事件。</li></ul></li><li><strong>示例</strong>：<div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;popstate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location.href); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 显示切换后的 URL</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.state); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 显示关联的 state</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul>',23)]))}const g=i(o,[["render",l]]);export{k as __pageData,g as default};
