import{_ as a,c as i,o as n,ae as t}from"./chunks/framework.Dh1jimFm.js";const g=JSON.parse('{"title":"简单工厂模式","description":"","frontmatter":{},"headers":[],"relativePath":"learn_sofrwareArchitecture/designPattern/23种设计模式-创建型/简单工厂模式.md","filePath":"learn_sofrwareArchitecture/designPattern/23种设计模式-创建型/简单工厂模式.md"}'),e={name:"learn_sofrwareArchitecture/designPattern/23种设计模式-创建型/简单工厂模式.md"};function l(r,s,h,p,k,d){return n(),i("div",null,s[0]||(s[0]=[t(`<h1 id="简单工厂模式" tabindex="-1">简单工厂模式 <a class="header-anchor" href="#简单工厂模式" aria-label="Permalink to &quot;简单工厂模式&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#角色-类图">角色/类图</a></li><li><a href="#示例代码">示例代码</a></li><li><a href="#优点">优点</a></li><li><a href="#缺点">缺点</a></li><li><a href="#适用场景">适用场景</a></li><li><a href="#总结">总结</a></li></ul></nav><h2 id="角色-类图" tabindex="-1">角色/类图 <a class="header-anchor" href="#角色-类图" aria-label="Permalink to &quot;角色/类图&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>角色</strong></th><th><strong>职责</strong></th></tr></thead><tbody><tr><td><strong>工厂类（Factory）</strong></td><td>负责根据传入参数创建并返回具体产品对象。包含核心逻辑判断（如 <code>switch</code> 或 <code>if/else</code>）。</td></tr><tr><td><strong>抽象产品类（Product）</strong></td><td>定义产品的接口（方法如 <code>operation()</code>），供具体产品实现。在 JavaScript 中常省略，直接用对象替代。</td></tr><tr><td><strong>具体产品类（ConcreteProduct）</strong></td><td>实现抽象产品接口的具体类（如 <code>Admin</code>、<code>User</code>）。每个类代表一种产品类型。</td></tr></tbody></table><h2 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 工厂类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (type) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;admin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Admin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Invalid user type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 抽象产品类（JavaScript 中通常用父类或接口定义）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getPermissions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Abstract method must be implemented&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 具体产品类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Admin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getPermissions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { read: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, write: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, delete: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> admin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UserFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;admin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(admin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPermissions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { read: true, write: true, delete: true }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>优点</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>解耦对象创建与使用</strong></td><td>客户端无需关心对象如何创建，只需调用工厂方法。</td></tr><tr><td><strong>集中管理创建逻辑</strong></td><td>所有对象的创建逻辑集中在工厂类中，便于维护和修改。</td></tr><tr><td><strong>简化客户端代码</strong></td><td>客户端代码更简洁，只需传递参数即可获取所需对象。</td></tr><tr><td><strong>易于扩展默认配置</strong></td><td>可通过工厂类统一管理默认参数或全局配置。</td></tr></tbody></table><h2 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>缺点</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>违反开闭原则</strong></td><td>新增产品类型需修改工厂类代码（如添加 <code>case</code> 分支）。</td></tr><tr><td><strong>工厂类职责过重</strong></td><td>工厂类可能因产品类型过多而变得臃肿。</td></tr><tr><td><strong>不易扩展复杂产品族</strong></td><td>若产品间存在复杂依赖或组合，简单工厂难以处理（需改用抽象工厂模式）。</td></tr></tbody></table><h2 id="适用场景" tabindex="-1"><strong>适用场景</strong> <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;**适用场景**&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>场景</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><strong>对象类型较少且固定</strong></td><td>用户角色（Admin/User）、日志记录器（FileLogger/ConsoleLogger）。</td></tr><tr><td><strong>创建逻辑简单</strong></td><td>直接根据参数 <code>new</code> 对象，无需复杂初始化。</td></tr><tr><td><strong>不频繁新增产品类型</strong></td><td>产品类型变化周期长，可接受偶尔修改工厂类。</td></tr></tbody></table><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>简单工厂模式通过 <strong>单一工厂类</strong> 封装对象创建逻辑，是设计模式中最基础、最易理解的一种。尽管其存在 <strong>违反开闭原则</strong> 的缺点，但在以下场景中仍具优势：</p><ul><li>产品类型有限且稳定。</li><li>无需频繁扩展新产品。</li><li>需要快速实现对象创建解耦。</li></ul><p>对于需要高度扩展性的场景，建议升级为 <strong>工厂方法模式</strong> 或 <strong>抽象工厂模式</strong>。</p>`,16)]))}const E=a(e,[["render",l]]);export{g as __pageData,E as default};
