import{_ as i,c as a,o as e,ae as n}from"./chunks/framework.Dh1jimFm.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"learn_frontend/react/react源码-18.1.0/Fiber中的模式.md","filePath":"learn_frontend/react/react源码-18.1.0/Fiber中的模式.md"}'),t={name:"learn_frontend/react/react源码-18.1.0/Fiber中的模式.md"};function l(r,s,o,d,p,h){return e(),a("div",null,s[0]||(s[0]=[n(`<p>在 React 的 Fiber 架构中，<code>fiber.mode</code> 表示当前 Fiber 树的渲染模式，它通过位掩码（Bitmask）的方式组合多个模式。以下是 <code>fiber.mode</code> 的常见取值及其含义，以及 <code>(mode &amp; ConcurrentMode) === NoMode</code> 的具体意义：</p><hr><h3 id="_1-fiber-mode-的可能取值" tabindex="-1"><strong>1. <code>fiber.mode</code> 的可能取值</strong> <a class="header-anchor" href="#_1-fiber-mode-的可能取值" aria-label="Permalink to &quot;**1. \`fiber.mode\` 的可能取值**&quot;">​</a></h3><p>React 内部通过二进制位掩码定义不同模式，以下是常见模式：</p><table tabindex="0"><thead><tr><th>模式名</th><th>位掩码值</th><th>描述</th></tr></thead><tbody><tr><td><strong><code>NoMode</code></strong></td><td><code>0b00000</code> (0)</td><td>默认模式，传统的同步渲染（React 17 之前的模式）。</td></tr><tr><td><strong><code>ConcurrentMode</code></strong></td><td><code>0b00001</code> (1)</td><td>并发模式，支持时间切片（Time Slicing）和可中断渲染（React 18+）。</td></tr><tr><td><strong><code>ProfileMode</code></strong></td><td><code>0b00010</code> (2)</td><td>性能分析模式，用于收集渲染阶段的性能数据（结合 DevTools 使用）。</td></tr><tr><td><strong><code>DebugTracingMode</code></strong></td><td><code>0b00100</code> (4)</td><td>调试跟踪模式，用于内部调试。</td></tr><tr><td><strong><code>StrictMode</code></strong></td><td><code>0b01000</code> (8)</td><td>严格模式，检测废弃 API 和副作用问题（通过 <code>&lt;StrictMode&gt;</code> 组件启用）。</td></tr><tr><td><strong><code>BlockingMode</code></strong></td><td><code>0b10000</code> (16)</td><td>阻塞模式，介于同步和并发模式之间（React 17 的过渡模式，已弃用）。</td></tr></tbody></table><hr><h3 id="_2-模式组合" tabindex="-1"><strong>2. 模式组合</strong> <a class="header-anchor" href="#_2-模式组合" aria-label="Permalink to &quot;**2. 模式组合**&quot;">​</a></h3><p>多个模式可以通过按位或（<code>|</code>）组合，例如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 同时启用并发模式和严格模式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcurrentMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StrictMode; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0b00001 | 0b01000 = 0b01001 (9)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><hr><h3 id="_3-mode-concurrentmode-nomode-的含义" tabindex="-1"><strong>3. <code>(mode &amp; ConcurrentMode) === NoMode</code> 的含义</strong> <a class="header-anchor" href="#_3-mode-concurrentmode-nomode-的含义" aria-label="Permalink to &quot;**3. \`(mode &amp; ConcurrentMode) === NoMode\` 的含义**&quot;">​</a></h3><ul><li><strong>位掩码操作</strong>：<code>mode &amp; ConcurrentMode</code> 会检查 <code>mode</code> 是否包含并发模式的位。</li><li><strong>结果</strong>： <ul><li>如果结果为 <code>NoMode</code>（即 <code>0</code>），表示 <strong>未启用并发模式</strong>。</li><li>否则，表示已启用并发模式。</li></ul></li></ul><h4 id="示例" tabindex="-1"><strong>示例</strong>： <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;**示例**：&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 场景 1：传统同步模式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NoMode; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0b00000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcurrentMode); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0b00000 &amp; 0b00001 → 0 (NoMode)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 场景 2：并发模式 + 严格模式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcurrentMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StrictMode; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0b01001 (9)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcurrentMode); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0b01001 &amp; 0b00001 → 1 (ConcurrentMode)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><hr><h3 id="_4-不同模式的行为差异" tabindex="-1"><strong>4. 不同模式的行为差异</strong> <a class="header-anchor" href="#_4-不同模式的行为差异" aria-label="Permalink to &quot;**4. 不同模式的行为差异**&quot;">​</a></h3><h4 id="_1-nomode-同步模式" tabindex="-1"><strong>(1) <code>NoMode</code>（同步模式）</strong> <a class="header-anchor" href="#_1-nomode-同步模式" aria-label="Permalink to &quot;**(1) \`NoMode\`（同步模式）**&quot;">​</a></h4><ul><li><strong>特点</strong>： <ul><li>渲染不可中断，一次性完成整个组件树的更新。</li><li>无法使用并发特性（如 <code>startTransition</code>、<code>useDeferredValue</code>）。</li></ul></li><li><strong>API 对应</strong>： <ul><li>通过 <code>ReactDOM.render</code> 创建的根节点默认是 <code>NoMode</code>。</li></ul></li></ul><h4 id="_2-concurrentmode-并发模式" tabindex="-1"><strong>(2) <code>ConcurrentMode</code>（并发模式）</strong> <a class="header-anchor" href="#_2-concurrentmode-并发模式" aria-label="Permalink to &quot;**(2) \`ConcurrentMode\`（并发模式）**&quot;">​</a></h4><ul><li><strong>特点</strong>： <ul><li>渲染可中断，优先处理高优先级更新（如用户输入）。</li><li>支持时间切片（Time Slicing）和过渡更新（Transitions）。</li></ul></li><li><strong>API 对应</strong>： <ul><li>通过 <code>ReactDOM.createRoot</code> 创建的根节点默认启用并发模式。</li></ul></li></ul><h4 id="_3-strictmode-严格模式" tabindex="-1"><strong>(3) <code>StrictMode</code>（严格模式）</strong> <a class="header-anchor" href="#_3-strictmode-严格模式" aria-label="Permalink to &quot;**(3) \`StrictMode\`（严格模式）**&quot;">​</a></h4><ul><li><strong>特点</strong>： <ul><li>在开发环境下，重复调用副作用函数（如 <code>useEffect</code>）以检测问题。</li><li>警告使用废弃的 API（如 <code>componentWillMount</code>）。</li></ul></li></ul><hr><h3 id="_5-如何设置-fiber-mode" tabindex="-1"><strong>5. 如何设置 <code>fiber.mode</code>？</strong> <a class="header-anchor" href="#_5-如何设置-fiber-mode" aria-label="Permalink to &quot;**5. 如何设置 \`fiber.mode\`？**&quot;">​</a></h3><ul><li><p><strong>根节点创建方式决定模式</strong>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 同步模式（NoMode）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ReactDOM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;, container);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 并发模式（ConcurrentMode）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> root</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReactDOM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createRoot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(container);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p><strong>严格模式通过组件启用</strong>：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">StrictMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">StrictMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><hr><h3 id="_6-模式检测的应用场景" tabindex="-1"><strong>6. 模式检测的应用场景</strong> <a class="header-anchor" href="#_6-模式检测的应用场景" aria-label="Permalink to &quot;**6. 模式检测的应用场景**&quot;">​</a></h3><ul><li><strong>示例代码</strong>：<div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcurrentMode) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NoMode) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 同步模式逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 并发模式逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><strong>使用场景</strong>： <ul><li>在 React 内部，根据模式决定是否启用时间切片或优先级调度。</li><li>第三方库可能需要兼容不同模式的行为（如并发安全的状态管理）。</li></ul></li></ul><hr><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><ul><li><strong><code>mode &amp; ConcurrentMode === NoMode</code></strong>：检测是否处于传统的同步渲染模式。</li><li><strong>模式组合</strong>：通过位掩码实现多模式共存（如同时启用并发和严格模式）。</li><li><strong>行为差异</strong>：不同模式决定了渲染的优先级、可中断性及调试行为。</li></ul><p>理解这些模式有助于深入掌握 React 的渲染机制，并优化应用在不同模式下的性能表现。</p>`,32)]))}const g=i(t,[["render",l]]);export{k as __pageData,g as default};
