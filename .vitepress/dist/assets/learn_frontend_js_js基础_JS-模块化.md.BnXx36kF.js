import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.Dh1jimFm.js";const c=JSON.parse('{"title":"JS-模块化","description":"","frontmatter":{},"headers":[],"relativePath":"learn_frontend/js/js基础/JS-模块化.md","filePath":"learn_frontend/js/js基础/JS-模块化.md"}'),e={name:"learn_frontend/js/js基础/JS-模块化.md"};function p(t,s,h,k,r,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="js-模块化" tabindex="-1">JS-模块化 <a class="header-anchor" href="#js-模块化" aria-label="Permalink to &quot;JS-模块化&quot;">​</a></h1><p>模块就是有良好封装性的对外只暴露特定接口的功能的复用单元，所以模块有以下特点</p><ul><li>要相互独立不能互相干扰</li><li>要暴露接口</li><li>有初始化逻辑</li></ul><h2 id="基于-iife-和闭包的模块化" tabindex="-1">基于 IIFE 和闭包的模块化 <a class="header-anchor" href="#基于-iife-和闭包的模块化" aria-label="Permalink to &quot;基于 IIFE 和闭包的模块化&quot;">​</a></h2><p>立即执行函数结合闭包刚好能够满足模块的要求</p><ul><li>var 变量受限于函数作用域，让其不会有变量污染，使得各个函数就像模块一样互不干扰</li><li>立即执行函数能够初始化一些配置，满足初始化要求</li><li>闭包让导出函数能够访问定义时所在作用域变量，而这些变量无法通过外界访问，保证了封装性的同时又暴露出了接口</li></ul><p>所以利用立即执行函数和闭包能够很好的实现模块化</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> counter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 初始化一些配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 返回闭包函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    dec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(counter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(counter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(counter.count); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined 无法获取count 良好的封装性</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="es6-模块化" tabindex="-1">ES6 模块化 <a class="header-anchor" href="#es6-模块化" aria-label="Permalink to &quot;ES6 模块化&quot;">​</a></h2><h2 id="commonjs-模块化" tabindex="-1">CommonJs 模块化 <a class="header-anchor" href="#commonjs-模块化" aria-label="Permalink to &quot;CommonJs 模块化&quot;">​</a></h2>`,10)]))}const o=i(e,[["render",p]]);export{c as __pageData,o as default};
