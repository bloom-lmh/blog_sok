import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.Dh1jimFm.js";const c=JSON.parse('{"title":"提示浏览器你希望如何加载资源","description":"","frontmatter":{},"headers":[],"relativePath":"learn_frontend/browser/browser基础/浏览器资源加载优化.md","filePath":"learn_frontend/browser/browser基础/浏览器资源加载优化.md"}'),l={name:"learn_frontend/browser/browser基础/浏览器资源加载优化.md"};function n(h,s,p,r,k,d){return t(),a("div",null,s[0]||(s[0]=[e('<h1 id="提示浏览器你希望如何加载资源" tabindex="-1">提示浏览器你希望如何加载资源 <a class="header-anchor" href="#提示浏览器你希望如何加载资源" aria-label="Permalink to &quot;提示浏览器你希望如何加载资源&quot;">​</a></h1><p>当 HTML 解析器遇到 <code>&lt;script&gt;</code> 标签时，会暂停文档解析，直到 JavaScript 代码加载、解析和执行完毕。这是因为 JavaScript 可以使用 document.write() 等方法改变 DOM 结构，因此必须在继续解析 <code>HTML</code> 文档前执行 JavaScript。<br> 为了顺利加载资源，网络开发者可以通过多种方式向浏览器发送提示。以下是简要总结上述几种提示浏览器如何加载资源的最常见方法：</p><h2 id="async-和-defer-属性" tabindex="-1">async 和 defer 属性 <a class="header-anchor" href="#async-和-defer-属性" aria-label="Permalink to &quot;async 和 defer 属性&quot;">​</a></h2><ol><li><p>async<br> a. 异步加载：浏览器在解析 HTML 文档的同时并行加载脚本。<br> b. 立即执行：一旦脚本加载完成，便立即执行，不会等待 HTML 文档的解析完成。<br> c. 非顺序执行：多个带有 async 属性的脚本会根据它们加载完成的顺序执行，而不是它们在文档中的顺序。<br> d. 优先外部脚本：更适合独立的、没有依赖其他脚本或 DOM 内容的脚本，例如第三方广告、数据收集或分析脚本。</p></li><li><p>defer<br> a.异步加载：浏览器在解析 HTML 文档的同时并行加载脚本。<br> b.延迟执行：脚本文件会在 HTML 文档完全解析和 DOMContentLoaded 事件执行之前执行。<br> c.顺序执行：多个带有 defer 属性的脚本会按它们在文档中的出现顺序执行。<br> d.DOM 依赖：适合需要在完整的 DOM 加载后执行的脚本，例如依赖于 DOM 元素的初始化代码。</p></li></ol><h2 id="link-rel-preload" tabindex="-1"><code>&lt;link rel=&quot;preload&quot;&gt;</code> <a class="header-anchor" href="#link-rel-preload" aria-label="Permalink to &quot;`&lt;link rel=&quot;preload&quot;&gt;`&quot;">​</a></h2><p>提前加载资源，以提高页面加载性能。常用于关键资源，比如脚本、样式表、字体等。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style.css&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol><li>预加载：浏览器在预先加载资源，但不执行。资源会被放在浏览器缓存中，等到需要的时候立即可用。</li><li>不影响执行时机：预加载的资源只是提前下载，并不改变它们原本的执行时机。需要在合适的地方使用相同资源的引用来执行或应用。</li></ol><h2 id="javascript-模块" tabindex="-1">JavaScript 模块 <a class="header-anchor" href="#javascript-模块" aria-label="Permalink to &quot;JavaScript 模块&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;module&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;script.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="dns-prefetch-和-preconnect" tabindex="-1">dns-prefetch 和 preconnect <a class="header-anchor" href="#dns-prefetch-和-preconnect" aria-label="Permalink to &quot;dns-prefetch 和 preconnect&quot;">​</a></h2><ol><li>dns-prefetch: 提前解析 DNS，提高后续请求速度。</li></ol><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dns-prefetch&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;//example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>preconnect: 提前与目标服务器建立连接，减少请求延迟。</li></ol><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preconnect&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://example.com&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>懒加载（Lazy Loading）<br> 延迟加载图片和其他不可见的元素，减少初始加载时间。</li></ol><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lazy&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过这些常见的方法，开发者可以有效地优化资源加载，提高页面性能和用户体验。</p>',18)]))}const E=i(l,[["render",n]]);export{c as __pageData,E as default};
