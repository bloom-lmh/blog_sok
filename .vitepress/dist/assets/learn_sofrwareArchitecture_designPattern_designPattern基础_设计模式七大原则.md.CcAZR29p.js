import{_ as r,c as a,o as n,j as e,a as l}from"./chunks/framework.Dh1jimFm.js";const f=JSON.parse('{"title":"设计模式七大原则","description":"","frontmatter":{},"headers":[],"relativePath":"learn_sofrwareArchitecture/designPattern/designPattern基础/设计模式七大原则.md","filePath":"learn_sofrwareArchitecture/designPattern/designPattern基础/设计模式七大原则.md"}'),i={name:"learn_sofrwareArchitecture/designPattern/designPattern基础/设计模式七大原则.md"};function s(o,t,c,d,_,u){return n(),a("div",null,t[0]||(t[0]=[e("h1",{id:"设计模式七大原则",tabindex:"-1"},[l("设计模式七大原则 "),e("a",{class:"header-anchor",href:"#设计模式七大原则","aria-label":'Permalink to "设计模式七大原则"'},"​")],-1),e("ul",null,[e("li",null,"单一职责原则 (SRP)​​：一个类只负责一个职责。"),e("li",null,"开闭原则 (OCP)​​：对扩展开放，对修改关闭。"),e("li",null,"里氏替换原则 (LSP)​​：子类可以替换父类且不影响程序正确性。"),e("li",null,"依赖倒置原则 (DIP)​​：依赖抽象接口，而非具体实现。"),e("li",null,"接口隔离原则 (ISP)​​：接口要小而专，避免臃肿。"),e("li",null,"迪米特法则 (LoD)​​：最少知识原则，减少对象间的直接依赖。"),e("li",null,"合成复用原则 (CRP)​​：优先使用组合/聚合，而非继承。")],-1)]))}const p=r(i,[["render",s]]);export{f as __pageData,p as default};
