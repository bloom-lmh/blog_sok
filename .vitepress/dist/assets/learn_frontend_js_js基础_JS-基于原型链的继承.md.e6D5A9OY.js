import{_ as t,c as a,o as r,ae as o}from"./chunks/framework.Dh1jimFm.js";const h=JSON.parse('{"title":"Js 基于原型的继承","description":"","frontmatter":{},"headers":[],"relativePath":"learn_frontend/js/js基础/JS-基于原型链的继承.md","filePath":"learn_frontend/js/js基础/JS-基于原型链的继承.md"}'),n={name:"learn_frontend/js/js基础/JS-基于原型链的继承.md"};function s(_,e,p,c,l,d){return r(),a("div",null,e[0]||(e[0]=[o('<h1 id="js-基于原型的继承" tabindex="-1">Js 基于原型的继承 <a class="header-anchor" href="#js-基于原型的继承" aria-label="Permalink to &quot;Js 基于原型的继承&quot;">​</a></h1><h2 id="原型" tabindex="-1">原型 <a class="header-anchor" href="#原型" aria-label="Permalink to &quot;原型&quot;">​</a></h2><p>每一个 Js 对象都有一个与之关联的对象，这个对象就叫做对象的原型对象。<br> 使用 new 关键字和构造函数创建的对象，都会以构造函数 prototype 属性的值作为它们的原型<br> 也就是说 new Object()创建的对象以 Object.prototype 为原型<br> {} 对象字面量也以 Object.prototype 为原型</p><p>几乎所有对象都有原型，但只有少数对象有 prototype 属性。<br> Object.prototype 没有原型，多数原型对象都是常规对象都有自己的原型。大多数内置构造函数都是继承自 Object.prototype</p><h2 id="基于原型链的查询和设置规则" tabindex="-1">基于原型链的查询和设置规则 <a class="header-anchor" href="#基于原型链的查询和设置规则" aria-label="Permalink to &quot;基于原型链的查询和设置规则&quot;">​</a></h2>',5)]))}const b=t(n,[["render",s]]);export{h as __pageData,b as default};
