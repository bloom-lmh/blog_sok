import{_ as i,c as a,o as t,ae as n}from"./chunks/framework.Dh1jimFm.js";const g=JSON.parse('{"title":"DOM 元素内容的基本操作","description":"","frontmatter":{},"headers":[],"relativePath":"learn_frontend/js/js基础/DOM元素内容的基本操作.md","filePath":"learn_frontend/js/js基础/DOM元素内容的基本操作.md"}'),l={name:"learn_frontend/js/js基础/DOM元素内容的基本操作.md"};function e(h,s,p,k,r,E){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="dom-元素内容的基本操作" tabindex="-1">DOM 元素内容的基本操作 <a class="header-anchor" href="#dom-元素内容的基本操作" aria-label="Permalink to &quot;DOM 元素内容的基本操作&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#操作-html-内容">操作 HTML 内容</a><ul><li><a href="#innerhtml">innerHTML</a></li><li><a href="#outerhtml">outerHTML</a></li><li><a href="#insertadjacenththl">insertAdjacentHTHL</a></li></ul></li><li><a href="#操作纯文本内容">操作纯文本内容</a><ul><li><a href="#innertext-textcontent">innerText/textContent</a></li><li><a href="#insertadjacenttext">insertAdjacentText</a></li><li><a href="#script-元素中的文本">&lt;script&gt;元素中的文本</a></li></ul></li></ul></nav><h2 id="操作-html-内容" tabindex="-1">操作 HTML 内容 <a class="header-anchor" href="#操作-html-内容" aria-label="Permalink to &quot;操作 HTML 内容&quot;">​</a></h2><h3 id="innerhtml" tabindex="-1">innerHTML <a class="header-anchor" href="#innerhtml" aria-label="Permalink to &quot;innerHTML&quot;">​</a></h3><p>inneHTML 用于向标签中添加 html 内容，设置 InnerHTML 通常效率很高。<br> 不过要注意，通过+=操作符给 innerHTML 追加文本的效率不高。因为这个操作既会涉及序列化操作，也会涉及解析操作：先把元素内容转换为字符串，然后再把新字符串转换回元素内容，也就是浏览器的解析器会重绘 DOM。<br> 比如下面的案例使用 innertHTML 操作会重绘元素，下面在点击第二次就没有效果了</p><ul><li>因为对#app 内容进行了重绘，即删除原内容然后设置新内容</li><li>重绘后产生的 button 对象没有事件</li><li>重绘后又产生了新 img 对象，所以在控制台中可看到新图片在加载</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点我重绘&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./images/tx1.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;button&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.innerHTML);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.parentElement.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&lt;hr/&gt;新的内容&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="outerhtml" tabindex="-1">outerHTML <a class="header-anchor" href="#outerhtml" aria-label="Permalink to &quot;outerHTML&quot;">​</a></h3><p>outerHTML 与 innerHTML 的区别是包含父标签</p><ul><li>outerHTML 不会删除原来的旧元素</li><li>只是用新内容替换替换旧内容，旧内容（元素）依然存在</li></ul><p>下面将 div#app 替换为新内容</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mydata&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;bloom&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;bloom11&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.outerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&lt;h1&gt;LMH&lt;/h1&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(app.outerHTML);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>以下是 <code>innerHTML</code> 和 <code>outerHTML</code> 的对比总结，包括是否触发 <strong>回流（Reflow）</strong> 和 <strong>重绘（Repaint）</strong>：</p><table tabindex="0"><thead><tr><th><strong>特性</strong></th><th><strong><code>innerHTML</code></strong></th><th><strong><code>outerHTML</code></strong></th></tr></thead><tbody><tr><td><strong>作用范围</strong></td><td>仅操作元素的 <strong>子内容</strong>（不包含自身）</td><td>操作元素的 <strong>完整 HTML</strong>（包含自身）</td></tr><tr><td><strong>修改行为</strong></td><td>替换内部子节点</td><td>替换整个元素（包括自身）</td></tr><tr><td><strong>是否解析 HTML</strong></td><td>是（会渲染传入的标签）</td><td>是</td></tr><tr><td><strong>是否触发回流</strong></td><td><strong>可能触发</strong>（若修改布局相关属性）</td><td><strong>一定触发</strong>（因元素被完全替换）</td></tr><tr><td><strong>是否触发重绘</strong></td><td><strong>是</strong>（内容变化需重新绘制）</td><td><strong>是</strong>（新元素需完全渲染）</td></tr><tr><td><strong>性能影响</strong></td><td>中等（需解析 HTML 并更新子节点）</td><td>较高（需销毁旧元素、解析并插入新元素）</td></tr><tr><td><strong>适用场景</strong></td><td>动态更新内容（如列表、表格行）</td><td>替换整个元素结构（如改变标签类型）</td></tr><tr><td><strong>事件监听是否保留</strong></td><td>可能丢失（若覆盖子元素）</td><td><strong>完全丢失</strong>（旧元素被销毁）</td></tr><tr><td><strong>安全风险</strong></td><td>可能引发 XSS（需转义不可信内容）</td><td>同 <code>innerHTML</code></td></tr></tbody></table><hr><p><strong>关键说明：</strong></p><ol><li><p><strong>回流（Reflow）条件</strong>：</p><ul><li><code>innerHTML</code> 仅在修改内容涉及布局（如改变元素尺寸、边距）时触发回流。</li><li><code>outerHTML</code> <strong>必然触发回流</strong>，因为整个元素被替换，浏览器需要重新计算布局。</li></ul></li><li><p><strong>重绘（Repaint）条件</strong>：<br> 两者均会触发重绘，因为视觉内容发生了变化。</p></li><li><p><strong>优化建议</strong>：</p><ul><li>避免频繁使用 <code>innerHTML/outerHTML</code>，优先使用 <code>createElement</code> + <code>appendChild</code>。</li><li>批量操作时，使用 <code>DocumentFragment</code> 减少回流次数。</li></ul></li></ol><p>如果需要更细粒度的性能分析，建议使用浏览器开发者工具的 <strong>Performance 面板</strong> 进行监控。</p><h3 id="insertadjacenththl" tabindex="-1">insertAdjacentHTHL <a class="header-anchor" href="#insertadjacenththl" aria-label="Permalink to &quot;insertAdjacentHTHL&quot;">​</a></h3><p>另一个相关的 Element 方法是 insertAdjacentHTHL,用于插入与指定元素“相邻”(adjacent)的任意 HTML 标记字符串。要插入的标签作为第二个参数传入，而“相邻”的精确含义取决于第一个参数的值。第一个参数可以是以下字符串值中的一个：“beforebegin&quot; &quot;afterbegin&quot; &quot;beforeend&quot; &quot;afterend&quot;。</p><h2 id="操作纯文本内容" tabindex="-1">操作纯文本内容 <a class="header-anchor" href="#操作纯文本内容" aria-label="Permalink to &quot;操作纯文本内容&quot;">​</a></h2><h3 id="innertext-textcontent" tabindex="-1">innerText/textContent <a class="header-anchor" href="#innertext-textcontent" aria-label="Permalink to &quot;innerText/textContent&quot;">​</a></h3><p>textContent 与 innerText 是访问或添加文本内容到元素中</p><ul><li>textContent 部分 IE 浏览器版本不支持</li><li>innerText 部分 FireFox 浏览器版本不支持</li><li>获取时忽略所有标签,只获取文本内容</li><li>设置时将内容中的标签当文本对待不进行标签解析,并替换原来的所有标签</li></ul><p>获取时忽略内容中的所有标签</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bloom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;我是文本&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(app.textContent); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 我是文本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.textContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&lt;h1&gt;插入的新文本&lt;/h1&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="insertadjacenttext" tabindex="-1">insertAdjacentText <a class="header-anchor" href="#insertadjacenttext" aria-label="Permalink to &quot;insertAdjacentText&quot;">​</a></h3><p>将文本插入到元素指定位置，不会对文本中的标签进行解析，包括以下位置</p><table tabindex="0"><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>beforebegin</td><td>元素本身前面</td></tr><tr><td>afterend</td><td>元素本身后面</td></tr><tr><td>afterbegin</td><td>元素内部前面</td></tr><tr><td>beforeend</td><td>元素内部后面</td></tr></tbody></table><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mydata&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;bloom&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;bloom11&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insertAdjacentText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;beforeend&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;h1&gt;LMH&lt;/h1&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(app.outerHTML);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="script-元素中的文本" tabindex="-1"><code>&lt;script&gt;</code>元素中的文本 <a class="header-anchor" href="#script-元素中的文本" aria-label="Permalink to &quot;\`&lt;script&gt;\`元素中的文本&quot;">​</a></h3><p>行内(即那些没有 src 属性的)＜ script ＞元素有一个 text 属性，可以用于获取它们的文本。浏览器永远不会显示＜ script ＞元素的内容，HTML 解析器会忽略脚本中的尖括号和&amp;字符。这就让＜ script ＞元素成为在 Web 应用中嵌入任意文本数据的理想场所。只要把这个元素的 type 属性设置为某个值(如 text/x-custom-data),明确它不是可执行的 JavaScript 代码即可。这样，JavaScript 解释器将会忽略这个脚本，但该元素还会出现在文档树中，它的 text 属性可以返回你在其中保存的数据。</p>`,32)]))}const o=i(l,[["render",e]]);export{g as __pageData,o as default};
