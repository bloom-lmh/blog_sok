import{_ as a,c as i,o as t,ae as e}from"./chunks/framework.Dh1jimFm.js";const c=JSON.parse('{"title":"BOM - history","description":"","frontmatter":{},"headers":[],"relativePath":"learn_frontend/js/js基础/BOM-history.md","filePath":"learn_frontend/js/js基础/BOM-history.md"}'),n={name:"learn_frontend/js/js基础/BOM-history.md"};function l(h,s,r,p,d,o){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="bom-history" tabindex="-1">BOM - history <a class="header-anchor" href="#bom-history" aria-label="Permalink to &quot;BOM - history&quot;">​</a></h1><p><code>history</code> 是浏览器对象模型(BOM)的重要组成部分，它提供了与浏览器会话历史记录交互的接口，允许开发者以编程方式导航和操作浏览历史。</p><nav class="table-of-contents"><ul><li><a href="#history-条目">⭐history 条目</a><ul><li><a href="#什么是条目">什么是条目</a></li><li><a href="#条目创建机制">⭐条目创建机制</a></li><li><a href="#条目激活过程">条目激活过程</a></li><li><a href="#条目销毁">条目销毁</a></li><li><a href="#条目和页面的关系">条目和页面的关系</a></li></ul></li><li><a href="#history-对象属性">history 对象属性</a><ul><li><a href="#length">length</a></li><li><a href="#history-state-对象">⭐ history.state 对象</a></li></ul></li><li><a href="#history-对象方法">history 对象方法</a><ul><li><a href="#导航方法">导航方法</a></li><li><a href="#管理状态方法">管理状态方法</a></li></ul></li><li><a href="#history-相关事件">history 相关事件</a><ul><li><a href="#popstate-事件">popstate 事件</a></li><li><a href="#hashchange-事件">hashchange 事件</a></li></ul></li><li><a href="#实际应用场景">实际应用场景</a></li></ul></nav><h2 id="history-条目" tabindex="-1">⭐history 条目 <a class="header-anchor" href="#history-条目" aria-label="Permalink to &quot;:star:history 条目&quot;">​</a></h2><p>在解释 history 对象属性和方法之前有必要说明什么是条目</p><h3 id="什么是条目" tabindex="-1">什么是条目 <a class="header-anchor" href="#什么是条目" aria-label="Permalink to &quot;什么是条目&quot;">​</a></h3><p>历史条目是浏览器历史记录栈的基本信息单元,每个历史条目包含以下关键信息：</p><table tabindex="0"><thead><tr><th><strong>类别</strong></th><th><strong>包含内容</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td><strong>URL 信息</strong></td><td>- 完整 URL（协议+域名+路径+查询参数+hash）<br>（例：<code>https://example.com/products?id=123#details</code>）</td><td>核心标识，必须存储</td></tr><tr><td><strong>文档状态</strong></td><td>- DOM 结构快照（部分浏览器通过 bfcache 实现）<br>- 滚动条位置（自动保存）<br>- 表单输入值（部分浏览器保留）</td><td>恢复页面时保持用户交互状态</td></tr><tr><td><strong>状态对象 state</strong></td><td>- <code>pushState()</code>/<code>replaceState()</code> 存储的 JSON 数据<br>（最大 2-10MB，浏览器差异）</td><td>开发者可控，用于 SPA 状态管理</td></tr><tr><td><strong>元信息</strong></td><td>- 时间戳<br>- 引荐来源（referrer）<br>- 安全上下文（HTTPS 状态）</td><td>用于分析和安全验证</td></tr></tbody></table><h3 id="条目创建机制" tabindex="-1">⭐条目创建机制 <a class="header-anchor" href="#条目创建机制" aria-label="Permalink to &quot;:star:条目创建机制&quot;">​</a></h3><table tabindex="0"><thead><tr><th>方法/场景</th><th>创建新历史记录条目</th><th>触发 popstate</th><th>页面刷新</th></tr></thead><tbody><tr><td><code>history.pushState()</code></td><td>是</td><td>否</td><td>否</td></tr><tr><td><code>history.replaceState()</code></td><td>否</td><td>否</td><td>否</td></tr><tr><td>常规<code>&lt;a&gt;</code>链接点击</td><td>是</td><td>不适用</td><td>是</td></tr><tr><td><code>location.hash</code> 变化</td><td>是(仅 hash 不同时)</td><td>是</td><td>否</td></tr><tr><td><code>location.replace()</code></td><td>否</td><td>不适用</td><td>是</td></tr><tr><td><code>location.href</code> 赋值</td><td>是</td><td>不适用</td><td>是</td></tr><tr><td>表单提交</td><td>是</td><td>是</td><td>传统表单交互</td></tr></tbody></table><h3 id="条目激活过程" tabindex="-1">条目激活过程 <a class="header-anchor" href="#条目激活过程" aria-label="Permalink to &quot;条目激活过程&quot;">​</a></h3><p>当用户点击后退/前进按钮时,对应<code>history.back()/history.go()</code></p><ul><li>浏览器从历史栈中取出对应条目</li><li>恢复 URL 显示</li><li>尝试从 bfcache 恢复完整页面状态（若可用）</li><li>触发 <code>popstate</code> 事件（<code>Hash</code> 变化则触发 <code>hashchange</code>）</li></ul><h3 id="条目销毁" tabindex="-1">条目销毁 <a class="header-anchor" href="#条目销毁" aria-label="Permalink to &quot;条目销毁&quot;">​</a></h3><ul><li>关闭浏览器标签页</li><li>超过历史记录最大限制（通常 50-100 条）</li><li>调用 location.replace()替换当前条目</li></ul><h3 id="条目和页面的关系" tabindex="-1">条目和页面的关系 <a class="header-anchor" href="#条目和页面的关系" aria-label="Permalink to &quot;条目和页面的关系&quot;">​</a></h3><ul><li>一个新页面对应可以多个条目，每个条目是页面不同状态下的映射</li><li>改变 hash 或通过 pushState 会为一个页面添加新的条目</li><li>状态 state 是页面信息的一种还有其它页面信息一起构成条目</li></ul><h2 id="history-对象属性" tabindex="-1">history 对象属性 <a class="header-anchor" href="#history-对象属性" aria-label="Permalink to &quot;history 对象属性&quot;">​</a></h2><h3 id="length" tabindex="-1">length <a class="header-anchor" href="#length" aria-label="Permalink to &quot;length&quot;">​</a></h3><p>返回当前会话中的历史记录条目数（只读）</p><h3 id="history-state-对象" tabindex="-1">⭐ history.state 对象 <a class="header-anchor" href="#history-state-对象" aria-label="Permalink to &quot;:star: history.state 对象&quot;">​</a></h3><ol><li>history.state 是浏览器 History API 提供的核心功能之一，用于在无刷新页面导航 ​（如单页应用 SPA）中存储和传递状态数据。</li><li>​<strong>state 是一个 JavaScript 对象</strong>，可以存储任意可序列化的数据（如 <code>{ page: &quot;home&quot;, id: 123 }</code>）。它与当前的历史记录条目绑定，<strong>当用户前进/后退时，对应的 state 会被恢复</strong>。</li><li>state 对象不会因为刷新而丢失，它保存着页面相关信息</li></ol><h2 id="history-对象方法" tabindex="-1">history 对象方法 <a class="header-anchor" href="#history-对象方法" aria-label="Permalink to &quot;history 对象方法&quot;">​</a></h2><h3 id="导航方法" tabindex="-1">导航方法 <a class="header-anchor" href="#导航方法" aria-label="Permalink to &quot;导航方法&quot;">​</a></h3><table tabindex="0"><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>back()</code></td><td>后退到上一个页面（相当于点击浏览器的后退按钮）</td></tr><tr><td><code>forward()</code></td><td>前进到下一个页面（相当于点击浏览器的前进按钮）</td></tr><tr><td><code>go(n)</code></td><td>从当前页面跳转到历史记录中的第 n 个页面（正数前进，负数后退，0 刷新）</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 后退一页</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">back</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 前进一页</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forward</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 前进/后退多页</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 后退两页</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 前进一页</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="管理状态方法" tabindex="-1">管理状态方法 <a class="header-anchor" href="#管理状态方法" aria-label="Permalink to &quot;管理状态方法&quot;">​</a></h3><table tabindex="0"><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>pushState()</code></td><td>向历史记录添加新条目（不刷新页面）</td></tr><tr><td><code>replaceState()</code></td><td>替换当前历史记录条目（不刷新页面）</td></tr></tbody></table><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-8u5JK" id="tab-kvleO4B" checked><label data-title="pushState" for="tab-kvleO4B">pushState</label><input type="radio" name="group-8u5JK" id="tab-68_6WWv"><label data-title="replaceState" for="tab-68_6WWv">replaceState</label></div><div class="blocks"><div class="language-javascript vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加新历史记录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pushState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { page: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;products&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 状态对象</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;Products Page&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 标题（大多数浏览器忽略）</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;/products&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可选的URL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 替换当前历史记录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replaceState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ page: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;updated&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Updated Page&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/updated&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></div></div><h2 id="history-相关事件" tabindex="-1">history 相关事件 <a class="header-anchor" href="#history-相关事件" aria-label="Permalink to &quot;history 相关事件&quot;">​</a></h2><h3 id="popstate-事件" tabindex="-1">popstate 事件 <a class="header-anchor" href="#popstate-事件" aria-label="Permalink to &quot;popstate 事件&quot;">​</a></h3><p>触发时机</p><ul><li>用户点击浏览器的 ​ 前进（→）​​ 或 ​ 后退（←）​​ 按钮。</li><li>调用 history.back()、history.forward() 或 history.go(n) 时。</li><li>​<strong>pushState() 和 replaceState() 不会触发 popstate</strong>​（它们只是修改历史记录）。</li></ul><p>使用示例</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;popstate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;当前状态:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event.state); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取关联的 state 对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;当前 URL:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, location.href); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取最新 URL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="hashchange-事件" tabindex="-1">hashchange 事件 <a class="header-anchor" href="#hashchange-事件" aria-label="Permalink to &quot;hashchange 事件&quot;">​</a></h3><p>触发时机</p><ul><li>URL 的哈希（# 部分）发生变化 ​（如 <code>&lt;a href=&quot;#section1&quot;&gt;</code> 或 location.hash = &quot;#new&quot;）。</li><li>适用于 ​ 基于哈希的路由（Hash-based Routing）​。</li></ul><p>使用示例</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 修改哈希（触发 hashchange）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.hash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;#about&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 监听哈希变化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hashchange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (location.hash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;#about&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;跳转到关于页&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="实际应用场景" tabindex="-1">实际应用场景 <a class="header-anchor" href="#实际应用场景" aria-label="Permalink to &quot;实际应用场景&quot;">​</a></h2><ol><li>单页应用(SPA)路由</li><li>滚动位置恢复</li></ol>`,42)]))}const E=a(n,[["render",l]]);export{c as __pageData,E as default};
