import{_ as a,c as s,o as n,ae as e}from"./chunks/framework.Dh1jimFm.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"learn_frontend/react/react源码-18.1.0/Fiber中的Lane.md","filePath":"learn_frontend/react/react源码-18.1.0/Fiber中的Lane.md"}'),r={name:"learn_frontend/react/react源码-18.1.0/Fiber中的Lane.md"};function i(l,t,d,o,h,c){return n(),s("div",null,t[0]||(t[0]=[e(`<p>是的，你的类比非常贴切！React 的车道模型（Lane Model）和操作系统的<strong>多级反馈队列调度算法</strong>（Multilevel Feedback Queue Scheduling）确实在核心思想上有相似之处。以下是两者的对比和具体解释：</p><hr><h3 id="_1-核心思想类比" tabindex="-1"><strong>1. 核心思想类比</strong> <a class="header-anchor" href="#_1-核心思想类比" aria-label="Permalink to &quot;**1. 核心思想类比**&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>多级反馈队列</strong>（操作系统）</th><th><strong>React 车道模型</strong>（Lane Model）</th></tr></thead><tbody><tr><td>将进程按优先级分配到不同队列</td><td>将更新按优先级分配到不同车道（Lane）</td></tr><tr><td>动态调整进程优先级（如长时间未运行的进程提升优先级）</td><td>动态调整更新优先级（如悬停交互比数据加载更重要）</td></tr><tr><td>高优先级队列优先调度，但低优先级队列最终也会执行</td><td>高优先级车道优先处理，但低优先级更新最终也会提交</td></tr><tr><td>防止低优先级任务饿死高优先级任务</td><td>防止低优先级更新被高优先级更新无限抢占</td></tr></tbody></table><hr><h3 id="_2-具体相似点" tabindex="-1"><strong>2. 具体相似点</strong> <a class="header-anchor" href="#_2-具体相似点" aria-label="Permalink to &quot;**2. 具体相似点**&quot;">​</a></h3><h4 id="_1-多级优先级" tabindex="-1"><strong>(1) 多级优先级</strong> <a class="header-anchor" href="#_1-多级优先级" aria-label="Permalink to &quot;**(1) 多级优先级**&quot;">​</a></h4><ul><li><strong>多级反馈队列</strong>：有多个队列（如 Q1、Q2、Q3），每个队列优先级不同。</li><li><strong>车道模型</strong>：有多个车道（如 <code>SyncLane</code>、<code>InputContinuousLane</code>、<code>DefaultLane</code>），每个车道优先级不同。</li></ul><h4 id="_2-动态优先级调整" tabindex="-1"><strong>(2) 动态优先级调整</strong> <a class="header-anchor" href="#_2-动态优先级调整" aria-label="Permalink to &quot;**(2) 动态优先级调整**&quot;">​</a></h4><ul><li><strong>多级反馈队列</strong>：进程在不同队列间移动（如长时间未运行的进程从 Q3 升到 Q2）。</li><li><strong>车道模型</strong>：更新可能被重新分配车道（如一个低优先级更新因超时被提升到同步车道）。</li></ul><h4 id="_3-避免饥饿" tabindex="-1"><strong>(3) 避免饥饿</strong> <a class="header-anchor" href="#_3-避免饥饿" aria-label="Permalink to &quot;**(3) 避免饥饿**&quot;">​</a></h4><ul><li><strong>多级反馈队列</strong>：低优先级队列的进程最终会被调度。</li><li><strong>车道模型</strong>：低优先级车道（如 <code>OffscreenLane</code>）的更新最终会被提交。</li></ul><hr><h3 id="_3-关键差异" tabindex="-1"><strong>3. 关键差异</strong> <a class="header-anchor" href="#_3-关键差异" aria-label="Permalink to &quot;**3. 关键差异**&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>多级反馈队列</strong></th><th><strong>React 车道模型</strong></th></tr></thead><tbody><tr><td>进程是独立实体</td><td>更新是关联到 Fiber 节点的任务</td></tr><tr><td>调度单位是整个进程</td><td>调度单位是单个更新（可能属于不同组件）</td></tr><tr><td>时间片轮转机制</td><td>基于渲染帧的时间切片（Time Slicing）</td></tr><tr><td>目标是公平性</td><td>目标是响应性和流畅渲染</td></tr></tbody></table><hr><h3 id="_4-react-车道模型的实际应用" tabindex="-1"><strong>4. React 车道模型的实际应用</strong> <a class="header-anchor" href="#_4-react-车道模型的实际应用" aria-label="Permalink to &quot;**4. React 车道模型的实际应用**&quot;">​</a></h3><h4 id="_1-车道类型示例" tabindex="-1"><strong>(1) 车道类型示例</strong> <a class="header-anchor" href="#_1-车道类型示例" aria-label="Permalink to &quot;**(1) 车道类型示例**&quot;">​</a></h4><table tabindex="0"><thead><tr><th>车道名</th><th>优先级</th><th>场景</th></tr></thead><tbody><tr><td><code>SyncLane</code></td><td>最高</td><td>用户输入、紧急状态更新</td></tr><tr><td><code>InputContinuousLane</code></td><td>高</td><td>连续输入（如滚动、拖拽）</td></tr><tr><td><code>DefaultLane</code></td><td>中</td><td>普通数据更新</td></tr><tr><td><code>TransitionLane</code></td><td>低</td><td>可中断的过渡更新</td></tr><tr><td><code>RetryLane</code></td><td>最低</td><td>错误重试、后台任务</td></tr></tbody></table><h4 id="_2-调度流程" tabindex="-1"><strong>(2) 调度流程</strong> <a class="header-anchor" href="#_2-调度流程" aria-label="Permalink to &quot;**(2) 调度流程**&quot;">​</a></h4><ol><li><strong>分配车道</strong>：更新触发时，根据来源（如点击事件、网络请求）分配车道。<div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> lane</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestUpdateLane</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fiber);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><strong>插入队列</strong>：将更新加入对应车队的队列。</li><li><strong>调度决策</strong>： <ul><li>高优先级车道（如 <code>SyncLane</code>）直接同步执行。</li><li>低优先级车道（如 <code>TransitionLane</code>）在空闲时处理，可被中断。</li></ul></li><li><strong>超时升级</strong>：如果低优先级更新长时间未处理，可能被提升到更高车道。</li></ol><h4 id="_3-代码示例" tabindex="-1"><strong>(3) 代码示例</strong> <a class="header-anchor" href="#_3-代码示例" aria-label="Permalink to &quot;**(3) 代码示例**&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 用户点击按钮（高优先级）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 这是一个过渡更新（低优先级）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// React 内部处理：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 用户点击 → SyncLane</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. setState(data) → TransitionLane</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 即使过渡更新被中断，用户点击仍会立即响应</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><hr><h3 id="_5-为什么需要这样的设计" tabindex="-1"><strong>5. 为什么需要这样的设计？</strong> <a class="header-anchor" href="#_5-为什么需要这样的设计" aria-label="Permalink to &quot;**5. 为什么需要这样的设计？**&quot;">​</a></h3><ul><li><strong>响应性</strong>：确保用户交互（如点击、输入）始终优先处理。</li><li><strong>流畅性</strong>：通过时间切片避免长时间任务阻塞渲染。</li><li><strong>公平性</strong>：低优先级任务最终会被执行，避免“饿死”。</li></ul><hr><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><p>你的类比非常准确！React 的车道模型借鉴了多级反馈队列的动态优先级和防饥饿思想，但针对前端渲染场景做了深度定制。理解这个模型可以帮助你更好地掌握 React 的并发特性（如 <code>startTransition</code>、<code>useDeferredValue</code>）的性能优化原理。</p>`,29)]))}const b=a(r,[["render",i]]);export{g as __pageData,b as default};
